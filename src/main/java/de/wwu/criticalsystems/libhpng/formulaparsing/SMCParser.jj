/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SMCParser.jj */
/*@egen*/PARSER_BEGIN(SMCParser)

/** Simple brace matcher. */
public class SMCParser/*@bgen(jjtree)*/implements SMCParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTSMCParserState jjtree = new JJTSMCParserState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SMCParser parser = new SMCParser(System.in);
    SimpleNode root = parser.Input();
    root.dump("");
  }

}

PARSER_END(SMCParser)

SKIP :
{
  " "
| "\t"
}

TOKEN :
{
  <LBRACE: "(">
| <RBRACE: ")">
| <NUMBER : (["0"-"9"])+ ("." (["0"-"9"])+)? >
| <SEP: ",">
| <ATOMIC: "a">
| <NOT: "!">
| <OR: "OR">
| <AND: "AND">
| <UNTIL: "U">
| <PROB: "P">
| <COMPARE: "<" | ">" | "=" | "<=" | ">=">
| <EOL:  "\n" | "\r" | "\r\n" >
}


SimpleNode Input()      :
{/*@bgen(jjtree) ROOT */
  SimpleNode jjtn000 = new SimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ROOT */
   try {
/*@egen*/
   Psi()<EOL>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Psi()       :
{Token t;}
{
 <LBRACE> Psi() <RBRACE> | Prob() | And() | Or() | Until() | Not() | Atomic()
}

void Atomic()        :
{/*@bgen(jjtree) ATOMIC */
 SimpleNode jjtn000 = new SimpleNode(JJTATOMIC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ATOMIC */
  try {
/*@egen*/
  t=<ATOMIC>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Not()     :
{/*@bgen(jjtree) NOT */
  SimpleNode jjtn000 = new SimpleNode(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NOT */
    try {
/*@egen*/
    <NOT> Psi()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

void And()     :
{/*@bgen(jjtree) AND */
  SimpleNode jjtn000 = new SimpleNode(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AND */
   try {
/*@egen*/
   <AND> <LBRACE> Psi() <SEP> Psi() <RBRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Or()    :
{/*@bgen(jjtree) OR */
  SimpleNode jjtn000 = new SimpleNode(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OR */
   try {
/*@egen*/
   <OR> <LBRACE> Psi() <SEP> Psi() <RBRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Until()       :
{/*@bgen(jjtree) UNTIL */
  SimpleNode jjtn000 = new SimpleNode(JJTUNTIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UNTIL */
   try {
/*@egen*/
   <UNTIL> "_" Number() <LBRACE> Psi() <SEP> Psi() <RBRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Prob()      :
{/*@bgen(jjtree) PROB */
  SimpleNode jjtn000 = new SimpleNode(JJTPROB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROB */
   try {
/*@egen*/
   <PROB> Compare() Number() <LBRACE> Psi() <RBRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Number()        :
{/*@bgen(jjtree) NUMBER */
 SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NUMBER */
  try {
/*@egen*/
  t=<NUMBER>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Compare()         :
{/*@bgen(jjtree) COMPARE */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMPARE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) COMPARE */
  try {
/*@egen*/
  t=<COMPARE>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}