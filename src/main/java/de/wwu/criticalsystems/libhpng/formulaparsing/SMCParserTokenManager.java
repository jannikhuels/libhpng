package de.wwu.criticalsystems.libhpng.formulaparsing;

/* Generated By:JJTree&JavaCC: Do not edit this line. SMCParserTokenManager.java */

/** Token Manager. */
public class SMCParserTokenManager implements SMCParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjStopAtPos(0, 18);
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      case 44:
         return jjStopAtPos(0, 11);
      case 58:
         return jjStopAtPos(0, 12);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x3e000L);
      case 85:
         return jjStopAtPos(0, 21);
      case 91:
         return jjStopAtPos(0, 5);
      case 93:
         return jjStopAtPos(0, 6);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x42000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x5000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80800000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 60:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 61:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 62:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 82:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40800000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(2, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      case 63:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(2, 17);
         break;
      case 68:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x32000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(4, 25);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x5000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x30800000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(4, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x30000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x30000000L);
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 24);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x30000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(8, 30);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 121:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(8, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(8, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(9, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = SimpleCharStream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(11, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  else if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 7:
                  if (curChar == 39 && kind > 10)
                     kind = 10;
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 9:
                  if (curChar == 10 && kind > 32)
                     kind = 32;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAddStates(0, 2);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(13, 14);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = SimpleCharStream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   12, 13, 14, 5, 6, 7, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\50", "\51", "\133", "\135", null, null, null, null, "\54", 
"\72", "\120\76", "\120\76\75", "\120\74", "\120\74\75", "\120\75\77", "\41", 
"\117\122", "\101\116\104", "\125", "\146\154\165\151\144\154\145\166\145\154", 
"\164\157\153\145\156\163", "\145\156\141\142\154\145\144", "\143\154\157\143\153", 
"\145\156\141\142\154\151\156\147\164\151\155\145", "\144\162\151\146\164", "\165\142\157\165\156\144\141\162\171", 
"\154\142\157\165\156\144\141\162\171", "\143\157\156\144\151\164\151\157\156", "\164\164", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffff9L, 
};
static final long[] jjtoSkip = {
   0x6L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[16];
static private final int[] jjstateSet = new int[32];
static protected char curChar;
/** Constructor. 
 * @throws ParseException */
public SMCParserTokenManager(SimpleCharStream stream) throws ParseException{
   if (input_stream != null)
	   throw new ParseException("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.");
	   //throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. 
 * @throws ParseException */
public SMCParserTokenManager(SimpleCharStream stream, int lexState) throws ParseException{
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. 
 * @throws ParseException */
static public void ReInit(SimpleCharStream stream, int lexState) throws ParseException
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. 
 * @throws ParseException */
static public void SwitchTo(int lexState) throws ParseException
{
   if (lexState >= 1 || lexState < 0)
	   throw new ParseException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.");
     // throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
   beginLine = SimpleCharStream.getBeginLine();
   beginColumn = SimpleCharStream.getBeginColumn();
   endLine = SimpleCharStream.getEndLine();
   endColumn = SimpleCharStream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. 
 * @throws ParseException */
public static Token getNextToken() throws ParseException
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = SimpleCharStream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { SimpleCharStream.backup(0);
      while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
         curChar = SimpleCharStream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         SimpleCharStream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = SimpleCharStream.getEndLine();
   int error_column = SimpleCharStream.getEndColumn();
   boolean EOFSeen = false;
   try { SimpleCharStream.readChar(); SimpleCharStream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      SimpleCharStream.backup(1);
   }
   //throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   System.out.println("Lexical error at line " +  error_line + ", column " +  error_column + ".");
   throw new ParseException("Lexical error at line " +  error_line + ", column " +  error_column + ".");
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
