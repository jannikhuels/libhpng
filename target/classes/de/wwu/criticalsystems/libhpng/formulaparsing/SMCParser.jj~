PARSER_BEGIN(SMCParser)

/** Simple brace matcher. */
public class SMCParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SMCParser parser = new SMCParser(System.in);
    parser.Input();
  }

}

PARSER_END(SMCParser)

SKIP :
{
  " "
| "\t"
}

TOKEN :
{
  <LBRACE: "(">
| <RBRACE: ")">
| <NUMBER : (["0"-"9"])+ ("." (["0"-"9"])+)? >
| <SEP: ",">
| <ATOMIC: "a">
| <NOT: "!">
| <OR: "OR">
| <AND: "AND">
| <UNTIL: "U">
| <PROB: "P">
| <COMPARE: "<" | ">" | "=" | "<=" | ">=">
| <EOL:  "\n" | "\r" | "\r\n" >
}

/** Root production. */
void Input() :
{}
{
   Psi()<EOL>
{System.out.println("success");} <EOF>
}

void Psi() :
{}
{
 <LBRACE> Psi() <RBRACE> | Prob() | Conjunction() | Disjunction() | Until() | <NOT> Psi() | <ATOMIC>
}

void Conjunction() :
{}
{
   <AND> <LBRACE> Psi() <SEP> Psi() <RBRACE>
}

void Disjunction() :
{}
{
   <OR> <LBRACE> Psi() <SEP> Psi() <RBRACE>
}

void Until() :
{}
{
   <UNTIL> "_" <NUMBER> <LBRACE> Psi() <SEP> Psi() <RBRACE>
}

void Prob() :
{}
{
   <PROB> <COMPARE> <NUMBER> <LBRACE> Psi() <RBRACE>
}
