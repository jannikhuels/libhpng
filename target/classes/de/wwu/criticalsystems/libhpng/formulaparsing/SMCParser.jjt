PARSER_BEGIN(SMCParser)

/** Simple brace matcher. */
public class SMCParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    SMCParser parser = new SMCParser(System.in);
    SimpleNode root = parser.Input();
    root.dump("");
  }

}

PARSER_END(SMCParser)

SKIP :
{
  " "
| "\t"
}

TOKEN :
{
  <LBRACE: "(">
| <RBRACE: ")">
| <LBRACESQ: "[">
| <RBRACESQ: "]">
| <COMPARE: "<" | ">" | "=" | "<=" | ">=">
| <DIGITS: (["0"-"9"])+>
| <NUMBER: <DIGITS> "." <DIGITS>>
| <ID: "'"(((["a"-"z","A"-"Z"])+) | (<DIGITS>))+ "'">
| <SEP: ",">
| <COLON: ":">
| <PROB: "P">
| <PROBQ: "P=?">
| <NOT: "!">
| <OR: "OR">
| <AND: "AND">
| <UNTIL: "U">
| <FLUID: "fluidlevel">
| <TOKENS: "tokens">
| <ENABLED: "enabled">
| <CLOCK: "clock">
| <FIRINGS: "firings">
| <DRIFT: "drift">
| <UBOUND: "uboundary">
| <LBOUND: "lboundary">
| <ARC: "condition">
| <EOL:  "\n" | "\r" | "\r\n" >
}


SimpleNode Input() #ROOT:
{}
{
   Time() <COLON> (Prob() | ProbQ()) <EOL> {return jjtThis;}
}

void Phi() #void :
{Token t;}
{
 <LBRACE> Phi() <RBRACE> | And() | Or() | Until() | Not() | Atomic()
}

void Atomic() #void:
{}
{
  Fluid() | Tokens() | Enabled() | Clock() | Firings() | Drift() | Ubound() | Lbound() | Arc()
}

void Not() #NOT:
{}
{
    <NOT> Phi() 
}

void And() #AND:
{}
{
   <AND> <LBRACE> Phi() <SEP> Phi() <RBRACE>
}

void Or() #OR:
{}
{
   <OR> <LBRACE> Phi() <SEP> Phi() <RBRACE>
}

void Until() #UNTIL:
{}
{
   <UNTIL> <LBRACESQ> Double() <SEP> Double() <RBRACESQ> <LBRACE> Phi() <SEP> Phi() <RBRACE>
}

void Prob() #PROB:
{}
{
   <PROB> Compare() Double() <LBRACE> Phi() <RBRACE>
}

void ProbQ() #PROBQ:
{}
{
   <PROBQ> <LBRACE> Phi() <RBRACE>
}

void Double() #DOUBLE:
{Token t;}
{
  t= <NUMBER> {jjtThis.value = t.image;}
}

void Integer() #INTEGER:
{Token t;}
{
  t=<DIGITS> {jjtThis.value = t.image;}
}

void Compare() #COMPARE:
{Token t;}
{
  t=<COMPARE> {jjtThis.value = t.image;}
}

void Id() #ID:
{Token t;}
{
  t=<ID> {jjtThis.value = t.image;}
}

void Time() #TIME:
{}
{
  Double()
}

void Fluid() #ATOMIC_FLUID:
{}
{
  <FLUID> <LBRACE> Id() <RBRACE> Compare() Double()
}

void Tokens() #ATOMIC_TOKENS:
{}
{
  <TOKENS> <LBRACE> Id() <RBRACE> Compare() Integer()
}

void Enabled() #ATOMIC_ENABLED:
{}
{
  <ENABLED> <LBRACE> Id() <RBRACE>
}

void Clock() #ATOMIC_CLOCK:
{}
{
  <CLOCK> <LBRACE> Id() <RBRACE> Compare() Double()
}

void Firings() #ATOMIC_FIRINGS:
{}
{
  <FIRINGS> <LBRACE> Id() <RBRACE> Compare() Integer()
}
 
void Drift() #ATOMIC_DRIFT:
{}
{
  <DRIFT> <LBRACE> Id() <RBRACE> Compare() Double()
}

void Ubound() #ATOMIC_UBOUND:
{}
{
  <UBOUND> <LBRACE> Id() <RBRACE>
}

void Lbound() #ATOMIC_LBOUND:
{}
{
  <LBOUND> <LBRACE> Id() <RBRACE>
}

void Arc() #ATOMIC_ARC:
{}
{
  <ARC> <LBRACE> Id() <RBRACE>
}
